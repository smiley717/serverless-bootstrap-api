import Boom from "@hapi/boom";
import { Response, Request, NextFunction } from "express";
import { InvalidDataDomainError, DomainError } from "../providers/errors";

/**
 * A catch-all error handler that sends a formatted JSON response.
 * Uses Boom to set the status code and provide consistent formatting.
 *
 * If using multiple error handlers, this should be the last one.
 *
 * @param err a javascript Error object.
 * @param req the Express request object.
 * @param res the Express response object.
 * @param next the Express next callback.
 */
const errorHandler = (
  error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  if (error instanceof DomainError) {
    error = Boom.badRequest(error.message);
  }

  // handle standard javascript errors.
  if (!error.isBoom) error = Boom.boomify(error);

  // these are generated by Boom, so they're guaranteed to exist.
  const { statusCode, payload } = error.output;

  if (statusCode >= 500) {
    console.error("An unexpected error has occurred.", error);
  }

  // API gateway will take care of sanitizing internal 500 server errors
  res.status(statusCode).json(payload);
};

export default errorHandler;
